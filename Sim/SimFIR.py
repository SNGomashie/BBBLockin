import numpy as np
from scipy.signal import butter, lfilter, freqz, buttord
import matplotlib.pyplot as plt


c = np.array([3.27958416e-14, 1.31183366e-13, 1.96775049e-13, 1.31183366e-13, 3.27958416e-14])
d = np.array([1., -3.99777533, 5.99332846, -3.99333093, 0.9977778])

Fs = 4800  # Hz
nyq = 0.5 * Fs
Fcl = 0.1 / nyq
Fch = 3 / nyq
order = 6
N, Wn = buttord(Fcl, Fch, 0.5, 40)
b, a = butter(N, Wn, btype='low', analog=False)
print(a, b)
print(d, c)
x = 0.9391013674
c = np.array([np.power((1 - x), 4)])
d = np.array([(4 * x), (np.power((-6 * x), 2)), (np.power((4 * x), 3)), (np.power(-x, 4))])
#  Frequency response recursive coefficients
w, h = freqz(d, c, worN=8000)
plt.yscale('log')
plt.semilogx(0.5 * Fs * w / np.pi, np.abs(h), 'b')
plt.title("Lowpass Filter Frequency Response")
plt.xlabel('Frequency [Hz]')
plt.grid()
plt.show()

#  Frequency response generated by scipy
w, h = freqz(b, a, worN=8000)
plt.semilogx(0.5 * Fs * w / np.pi, np.abs(h), 'b')
plt.title("Lowpass Filter Frequency Response")
plt.xlabel('Frequency [Hz]')
plt.grid()
plt.show()
