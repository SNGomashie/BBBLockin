import numpy as np
import matplotlib.pyplot as plt

sinLUT = np.array([0x8000, 0x8032, 0x8064, 0x8096, 0x80C9, 0x80FB, 0x812D, 0x815F, 0x8192, 0x81C4, 0x81F6, 0x8228, 0x825B, 0x828D, 0x82BF, 0x82F1, 0x8324, 0x8356, 0x8388, 0x83BA, 0x83ED, 0x841F, 0x8451, 0x8483, 0x84B6, 0x84E8, 0x851A, 0x854C, 0x857E, 0x85B1, 0x85E3, 0x8615, 0x8647, 0x867A, 0x86AC, 0x86DE, 0x8710, 0x8742, 0x8774, 0x87A7, 0x87D9, 0x880B, 0x883D, 0x886F, 0x88A1, 0x88D4, 0x8906, 0x8938, 0x896A, 0x899C, 0x89CE, 0x8A00, 0x8A32, 0x8A65, 0x8A97, 0x8AC9, 0x8AFB, 0x8B2D, 0x8B5F, 0x8B91, 0x8BC3, 0x8BF5, 0x8C27, 0x8C59, 0x8C8B, 0x8CBD, 0x8CEF, 0x8D21, 0x8D53, 0x8D85, 0x8DB7, 0x8DE9, 0x8E1B, 0x8E4D, 0x8E7F, 0x8EB1, 0x8EE3, 0x8F15, 0x8F47, 0x8F79, 0x8FAB, 0x8FDC, 0x900E, 0x9040, 0x9072, 0x90A4, 0x90D6, 0x9108, 0x9139, 0x916B, 0x919D, 0x91CF, 0x9201, 0x9232, 0x9264, 0x9296, 0x92C7, 0x92F9, 0x932B, 0x935D, 0x938E, 0x93C0, 0x93F2, 0x9423, 0x9455, 0x9487, 0x94B8, 0x94EA, 0x951B, 0x954D, 0x957E, 0x95B0, 0x95E1, 0x9613, 0x9645, 0x9676, 0x96A7, 0x96D9, 0x970A, 0x973C, 0x976D, 0x979F, 0x97D0, 0x9801, 0x9833, 0x9864, 0x9895, 0x98C7, 0x98F8, 0x9929, 0x995B, 0x998C, 0x99BD, 0x99EE, 0x9A20, 0x9A51, 0x9A82, 0x9AB3, 0x9AE4, 0x9B15, 0x9B47, 0x9B78, 0x9BA9, 0x9BDA, 0x9C0B, 0x9C3C, 0x9C6D, 0x9C9E, 0x9CCF, 0x9D00, 0x9D31, 0x9D62, 0x9D93, 0x9DC4, 0x9DF4, 0x9E25, 0x9E56, 0x9E87, 0x9EB8, 0x9EE9, 0x9F19, 0x9F4A, 0x9F7B, 0x9FAC, 0x9FDC, 0xA00D, 0xA03E, 0xA06E, 0xA09F, 0xA0CF, 0xA100, 0xA131, 0xA161, 0xA192, 0xA1C2, 0xA1F3, 0xA223, 0xA253, 0xA284, 0xA2B4, 0xA2E5, 0xA315, 0xA345, 0xA376, 0xA3A6, 0xA3D6, 0xA406, 0xA437, 0xA467, 0xA497, 0xA4C7, 0xA4F7, 0xA527, 0xA557, 0xA588, 0xA5B8, 0xA5E8, 0xA618, 0xA648, 0xA678, 0xA6A7, 0xA6D7, 0xA707, 0xA737, 0xA767, 0xA797, 0xA7C7, 0xA7F6, 0xA826, 0xA856, 0xA885, 0xA8B5, 0xA8E5, 0xA914, 0xA944, 0xA974, 0xA9A3, 0xA9D3, 0xAA02, 0xAA32, 0xAA61, 0xAA90, 0xAAC0, 0xAAEF, 0xAB1F, 0xAB4E, 0xAB7D, 0xABAC, 0xABDC, 0xAC0B, 0xAC3A, 0xAC69, 0xAC98, 0xACC7, 0xACF6, 0xAD26, 0xAD55, 0xAD84, 0xADB3, 0xADE1, 0xAE10, 0xAE3F, 0xAE6E, 0xAE9D, 0xAECC, 0xAEFA, 0xAF29, 0xAF58, 0xAF87, 0xAFB5, 0xAFE4, 0xB013, 0xB041, 0xB070, 0xB09E, 0xB0CD, 0xB0FB, 0xB12A, 0xB158, 0xB186, 0xB1B5, 0xB1E3, 0xB211, 0xB23F, 0xB26E, 0xB29C, 0xB2CA, 0xB2F8, 0xB326, 0xB354, 0xB382, 0xB3B0, 0xB3DE, 0xB40C, 0xB43A, 0xB468, 0xB496, 0xB4C4, 0xB4F1, 0xB51F, 0xB54D, 0xB57B, 0xB5A8, 0xB5D6, 0xB603, 0xB631, 0xB65E, 0xB68C, 0xB6B9, 0xB6E7, 0xB714, 0xB742, 0xB76F, 0xB79C, 0xB7C9, 0xB7F7, 0xB824, 0xB851, 0xB87E, 0xB8AB, 0xB8D8, 0xB905, 0xB932, 0xB95F, 0xB98C, 0xB9B9, 0xB9E6, 0xBA13, 0xBA3F, 0xBA6C, 0xBA99, 0xBAC6, 0xBAF2, 0xBB1F, 0xBB4B, 0xBB78, 0xBBA4, 0xBBD1, 0xBBFD, 0xBC2A, 0xBC56, 0xBC82, 0xBCAF, 0xBCDB, 0xBD07, 0xBD33, 0xBD5F, 0xBD8B, 0xBDB7, 0xBDE3, 0xBE0F, 0xBE3B, 0xBE67, 0xBE93, 0xBEBF, 0xBEEB, 0xBF17, 0xBF42, 0xBF6E, 0xBF9A, 0xBFC5, 0xBFF1, 0xC01C, 0xC048, 0xC073, 0xC09F, 0xC0CA, 0xC0F5, 0xC121, 0xC14C, 0xC177, 0xC1A2, 0xC1CD, 0xC1F8, 0xC224, 0xC24F, 0xC279, 0xC2A4, 0xC2CF, 0xC2FA, 0xC325, 0xC350, 0xC37A, 0xC3A5, 0xC3D0, 0xC3FA, 0xC425, 0xC450, 0xC47A, 0xC4A4, 0xC4CF, 0xC4F9, 0xC524, 0xC54E, 0xC578, 0xC5A2, 0xC5CC, 0xC5F7, 0xC621, 0xC64B, 0xC675, 0xC69F, 0xC6C8, 0xC6F2, 0xC71C, 0xC746, 0xC770, 0xC799, 0xC7C3, 0xC7ED, 0xC816, 0xC840, 0xC869, 0xC893, 0xC8BC, 0xC8E5, 0xC90F, 0xC938, 0xC961, 0xC98A, 0xC9B3, 0xC9DC, 0xCA05, 0xCA2E, 0xCA57, 0xCA80, 0xCAA9, 0xCAD2, 0xCAFB, 0xCB23, 0xCB4C, 0xCB75, 0xCB9D, 0xCBC6, 0xCBEE, 0xCC17, 0xCC3F, 0xCC67, 0xCC90, 0xCCB8, 0xCCE0, 0xCD08, 0xCD30, 0xCD59, 0xCD81, 0xCDA9, 0xCDD0, 0xCDF8, 0xCE20, 0xCE48, 0xCE70, 0xCE97, 0xCEBF, 0xCEE7, 0xCF0E, 0xCF36, 0xCF5D, 0xCF85, 0xCFAC, 0xCFD3, 0xCFFB, 0xD022, 0xD049, 0xD070, 0xD097, 0xD0BE, 0xD0E5, 0xD10C, 0xD133, 0xD15A, 0xD181, 0xD1A7, 0xD1CE, 0xD1F5, 0xD21B, 0xD242, 0xD268, 0xD28F, 0xD2B5, 0xD2DB, 0xD302, 0xD328, 0xD34E, 0xD374, 0xD39A, 0xD3C0, 0xD3E6, 0xD40C, 0xD432, 0xD458, 0xD47E, 0xD4A4, 0xD4C9, 0xD4EF, 0xD514, 0xD53A, 0xD55F, 0xD585, 0xD5AA, 0xD5D0, 0xD5F5, 0xD61A, 0xD63F, 0xD664, 0xD689, 0xD6AE, 0xD6D3, 0xD6F8, 0xD71D, 0xD742, 0xD767, 0xD78B, 0xD7B0, 0xD7D5, 0xD7F9, 0xD81E, 0xD842, 0xD866, 0xD88B, 0xD8AF, 0xD8D3, 0xD8F7, 0xD91B, 0xD940, 0xD964, 0xD987, 0xD9AB, 0xD9CF, 0xD9F3, 0xDA17, 0xDA3A, 0xDA5E, 0xDA82, 0xDAA5, 0xDAC9, 0xDAEC, 0xDB0F, 0xDB33, 0xDB56, 0xDB79, 0xDB9C, 0xDBBF, 0xDBE2, 0xDC05, 0xDC28, 0xDC4B, 0xDC6E, 0xDC91, 0xDCB3, 0xDCD6, 0xDCF8, 0xDD1B, 0xDD3D, 0xDD60, 0xDD82, 0xDDA5, 0xDDC7, 0xDDE9, 0xDE0B, 0xDE2D, 0xDE4F, 0xDE71, 0xDE93, 0xDEB5, 0xDED7, 0xDEF8, 0xDF1A, 0xDF3C, 0xDF5D, 0xDF7F, 0xDFA0, 0xDFC2, 0xDFE3, 0xE004, 0xE025, 0xE046, 0xE068, 0xE089, 0xE0AA, 0xE0CA, 0xE0EB, 0xE10C, 0xE12D, 0xE14E, 0xE16E, 0xE18F, 0xE1AF, 0xE1D0, 0xE1F0, 0xE210, 0xE231, 0xE251, 0xE271, 0xE291, 0xE2B1, 0xE2D1, 0xE2F1, 0xE311, 0xE331, 0xE351, 0xE370, 0xE390, 0xE3AF, 0xE3CF, 0xE3EE, 0xE40E, 0xE42D, 0xE44C, 0xE46B, 0xE48B, 0xE4AA, 0xE4C9, 0xE4E8, 0xE507, 0xE525, 0xE544, 0xE563, 0xE582, 0xE5A0, 0xE5BF, 0xE5DD, 0xE5FB, 0xE61A, 0xE638, 0xE656, 0xE674, 0xE693, 0xE6B1, 0xE6CF, 0xE6ED, 0xE70A, 0xE728, 0xE746, 0xE764, 0xE781, 0xE79F, 0xE7BC, 0xE7DA, 0xE7F7, 0xE814, 0xE831, 0xE84F, 0xE86C, 0xE889, 0xE8A6, 0xE8C3, 0xE8DF, 0xE8FC, 0xE919, 0xE936, 0xE952, 0xE96F, 0xE98B, 0xE9A8, 0xE9C4, 0xE9E0, 0xE9FC, 0xEA19, 0xEA35, 0xEA51, 0xEA6D, 0xEA89, 0xEAA4, 0xEAC0, 0xEADC, 0xEAF8, 0xEB13, 0xEB2F, 0xEB4A, 0xEB65, 0xEB81, 0xEB9C, 0xEBB7, 0xEBD2, 0xEBED, 0xEC08, 0xEC23, 0xEC3E, 0xEC59, 0xEC74, 0xEC8E, 0xECA9, 0xECC3, 0xECDE, 0xECF8, 0xED13, 0xED2D, 0xED47, 0xED61, 0xED7B, 0xED95, 0xEDAF, 0xEDC9, 0xEDE3, 0xEDFD, 0xEE16, 0xEE30, 0xEE4A, 0xEE63, 0xEE7C, 0xEE96, 0xEEAF, 0xEEC8, 0xEEE1, 0xEEFA, 0xEF13, 0xEF2C, 0xEF45, 0xEF5E, 0xEF77, 0xEF8F, 0xEFA8, 0xEFC1, 0xEFD9, 0xEFF2, 0xF00A, 0xF022, 0xF03A, 0xF052, 0xF06B, 0xF083, 0xF09A, 0xF0B2, 0xF0CA, 0xF0E2, 0xF0FA, 0xF111, 0xF129, 0xF140, 0xF157, 0xF16F, 0xF186, 0xF19D, 0xF1B4, 0xF1CB, 0xF1E2, 0xF1F9, 0xF210, 0xF227, 0xF23E, 0xF254, 0xF26B, 0xF281, 0xF298, 0xF2AE, 0xF2C4, 0xF2DB, 0xF2F1, 0xF307, 0xF31D, 0xF333, 0xF349, 0xF35E, 0xF374, 0xF38A, 0xF39F, 0xF3B5, 0xF3CA, 0xF3E0, 0xF3F5, 0xF40A, 0xF420, 0xF435, 0xF44A, 0xF45F, 0xF474, 0xF488, 0xF49D, 0xF4B2, 0xF4C6, 0xF4DB, 0xF4EF, 0xF504, 0xF518, 0xF52C, 0xF541, 0xF555, 0xF569, 0xF57D, 0xF591, 0xF5A5, 0xF5B8, 0xF5CC, 0xF5E0, 0xF5F3, 0xF607, 0xF61A, 0xF62D, 0xF641, 0xF654, 0xF667, 0xF67A, 0xF68D, 0xF6A0, 0xF6B3, 0xF6C6, 0xF6D8, 0xF6EB, 0xF6FE, 0xF710, 0xF722, 0xF735, 0xF747, 0xF759, 0xF76B, 0xF77D, 0xF78F, 0xF7A1, 0xF7B3, 0xF7C5, 0xF7D7, 0xF7E8, 0xF7FA, 0xF80B, 0xF81D, 0xF82E, 0xF83F, 0xF850, 0xF862, 0xF873, 0xF884, 0xF894, 0xF8A5, 0xF8B6, 0xF8C7, 0xF8D7, 0xF8E8, 0xF8F8, 0xF909, 0xF919, 0xF929, 0xF939, 0xF94A, 0xF95A, 0xF969, 0xF979, 0xF989, 0xF999, 0xF9A9, 0xF9B8, 0xF9C8, 0xF9D7, 0xF9E6, 0xF9F6, 0xFA05, 0xFA14, 0xFA23, 0xFA32, 0xFA41, 0xFA50, 0xFA5F, 0xFA6D, 0xFA7C, 0xFA8B, 0xFA99, 0xFAA7, 0xFAB6, 0xFAC4, 0xFAD2, 0xFAE0, 0xFAEE, 0xFAFC, 0xFB0A, 0xFB18, 0xFB26, 0xFB33, 0xFB41, 0xFB4F, 0xFB5C, 0xFB69, 0xFB77, 0xFB84, 0xFB91, 0xFB9E, 0xFBAB, 0xFBB8, 0xFBC5, 0xFBD2, 0xFBDE, 0xFBEB, 0xFBF8, 0xFC04, 0xFC10, 0xFC1D, 0xFC29, 0xFC35, 0xFC41, 0xFC4D, 0xFC59, 0xFC65, 0xFC71, 0xFC7D, 0xFC88, 0xFC94, 0xFC9F, 0xFCAB, 0xFCB6, 0xFCC1, 0xFCCD, 0xFCD8, 0xFCE3, 0xFCEE, 0xFCF9, 0xFD04, 0xFD0E, 0xFD19, 0xFD24, 0xFD2E, 0xFD39, 0xFD43, 0xFD4D, 0xFD57, 0xFD62, 0xFD6C, 0xFD76, 0xFD80, 0xFD89, 0xFD93, 0xFD9D, 0xFDA6, 0xFDB0, 0xFDB9, 0xFDC3, 0xFDCC, 0xFDD5, 0xFDDF, 0xFDE8, 0xFDF1, 0xFDFA, 0xFE02, 0xFE0B, 0xFE14, 0xFE1D, 0xFE25, 0xFE2E, 0xFE36, 0xFE3E, 0xFE47, 0xFE4F, 0xFE57, 0xFE5F, 0xFE67, 0xFE6F, 0xFE77, 0xFE7E, 0xFE86, 0xFE8D, 0xFE95, 0xFE9C, 0xFEA4, 0xFEAB, 0xFEB2, 0xFEB9, 0xFEC0, 0xFEC7, 0xFECE, 0xFED5, 0xFEDC, 0xFEE2, 0xFEE9, 0xFEEF, 0xFEF6, 0xFEFC, 0xFF02, 0xFF09, 0xFF0F, 0xFF15, 0xFF1B, 0xFF21, 0xFF26, 0xFF2C, 0xFF32, 0xFF37, 0xFF3D, 0xFF42, 0xFF48, 0xFF4D, 0xFF52, 0xFF57, 0xFF5C, 0xFF61, 0xFF66, 0xFF6B, 0xFF70, 0xFF74, 0xFF79, 0xFF7D, 0xFF82, 0xFF86, 0xFF8A, 0xFF8F, 0xFF93, 0xFF97, 0xFF9B, 0xFF9F, 0xFFA2, 0xFFA6, 0xFFAA, 0xFFAD, 0xFFB1, 0xFFB4, 0xFFB8, 0xFFBB, 0xFFBE, 0xFFC1, 0xFFC4, 0xFFC7, 0xFFCA, 0xFFCD, 0xFFD0, 0xFFD2, 0xFFD5, 0xFFD8, 0xFFDA, 0xFFDC, 0xFFDF, 0xFFE1, 0xFFE3, 0xFFE5, 0xFFE7, 0xFFE9, 0xFFEB, 0xFFEC, 0xFFEE, 0xFFF0, 0xFFF1, 0xFFF3, 0xFFF4, 0xFFF5, 0xFFF6, 0xFFF7, 0xFFF8, 0xFFF9, 0xFFFA, 0xFFFB, 0xFFFC, 0xFFFD, 0xFFFD, 0xFFFE, 0xFFFE, 0xFFFE, 0xFFFF, 0xFFFF, 0xFFFF])

phaseIncrement = np.zeros(4095)

table = np.zeros(4096)
table2 = np.zeros(4096)
for i in range(4095):
    table[i] = np.sin(2 * np.pi * i / 4096)
table[4095] = table[0]

for i in range(4095):
    if i <= 1023:
        table2[i] = sinLUT[i]
    if i > 1023 and i <= 2046:
        table2[i] = sinLUT[1024 - (i - 1023)]
    if i > 2046 and i <= 3069:
        table2[i] = 65336 - sinLUT[(i - 2049)]
    if i > 3069 and i <= 4095:
        table2[i] = 65335 - sinLUT[1023 - (i - 3069)]
table2[4095] = table2[0]
# table += 32668
plt.plot(range(len(table2)), table2)
plt.show()
plt.plot(range(len(table)), table)
plt.show()
plt.plot(range(len(sinLUT)), sinLUT)
plt.plot(range(len(sinLUT), (len(sinLUT) * 2 )), sinLUT[::-1])
plt.plot(range(len(sinLUT)*2, (len(sinLUT) * 3 )), 65336 - sinLUT)
plt.plot(range(len(sinLUT)*3, (len(sinLUT) * 4 )), 65336 - sinLUT[::-1])
